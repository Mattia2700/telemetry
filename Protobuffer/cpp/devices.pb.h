// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: devices.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_devices_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_devices_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_devices_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_devices_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_devices_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_devices_2eproto_metadata_getter(int index);
namespace devices {
class Bms;
struct BmsDefaultTypeInternal;
extern BmsDefaultTypeInternal _Bms_default_instance_;
class Chimera;
struct ChimeraDefaultTypeInternal;
extern ChimeraDefaultTypeInternal _Chimera_default_instance_;
class Ecu;
struct EcuDefaultTypeInternal;
extern EcuDefaultTypeInternal _Ecu_default_instance_;
class Encoder;
struct EncoderDefaultTypeInternal;
extern EncoderDefaultTypeInternal _Encoder_default_instance_;
class Imu;
struct ImuDefaultTypeInternal;
extern ImuDefaultTypeInternal _Imu_default_instance_;
class Inverter;
struct InverterDefaultTypeInternal;
extern InverterDefaultTypeInternal _Inverter_default_instance_;
class Pedals;
struct PedalsDefaultTypeInternal;
extern PedalsDefaultTypeInternal _Pedals_default_instance_;
class Steer;
struct SteerDefaultTypeInternal;
extern SteerDefaultTypeInternal _Steer_default_instance_;
}  // namespace devices
PROTOBUF_NAMESPACE_OPEN
template<> ::devices::Bms* Arena::CreateMaybeMessage<::devices::Bms>(Arena*);
template<> ::devices::Chimera* Arena::CreateMaybeMessage<::devices::Chimera>(Arena*);
template<> ::devices::Ecu* Arena::CreateMaybeMessage<::devices::Ecu>(Arena*);
template<> ::devices::Encoder* Arena::CreateMaybeMessage<::devices::Encoder>(Arena*);
template<> ::devices::Imu* Arena::CreateMaybeMessage<::devices::Imu>(Arena*);
template<> ::devices::Inverter* Arena::CreateMaybeMessage<::devices::Inverter>(Arena*);
template<> ::devices::Pedals* Arena::CreateMaybeMessage<::devices::Pedals>(Arena*);
template<> ::devices::Steer* Arena::CreateMaybeMessage<::devices::Steer>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace devices {

// ===================================================================

class Imu PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:devices.Imu) */ {
 public:
  inline Imu() : Imu(nullptr) {}
  virtual ~Imu();
  explicit constexpr Imu(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Imu(const Imu& from);
  Imu(Imu&& from) noexcept
    : Imu() {
    *this = ::std::move(from);
  }

  inline Imu& operator=(const Imu& from) {
    CopyFrom(from);
    return *this;
  }
  inline Imu& operator=(Imu&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Imu& default_instance() {
    return *internal_default_instance();
  }
  static inline const Imu* internal_default_instance() {
    return reinterpret_cast<const Imu*>(
               &_Imu_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Imu& a, Imu& b) {
    a.Swap(&b);
  }
  inline void Swap(Imu* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Imu* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Imu* New() const final {
    return CreateMaybeMessage<Imu>(nullptr);
  }

  Imu* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Imu>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Imu& from);
  void MergeFrom(const Imu& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Imu* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "devices.Imu";
  }
  protected:
  explicit Imu(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_devices_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimestampFieldNumber = 1,
    kXFieldNumber = 2,
    kYFieldNumber = 3,
    kZFieldNumber = 4,
    kScaleFieldNumber = 5,
  };
  // float timestamp = 1;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  float timestamp() const;
  void set_timestamp(float value);
  private:
  float _internal_timestamp() const;
  void _internal_set_timestamp(float value);
  public:

  // float x = 2;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 3;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 4;
  bool has_z() const;
  private:
  bool _internal_has_z() const;
  public:
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // float scale = 5;
  bool has_scale() const;
  private:
  bool _internal_has_scale() const;
  public:
  void clear_scale();
  float scale() const;
  void set_scale(float value);
  private:
  float _internal_scale() const;
  void _internal_set_scale(float value);
  public:

  // @@protoc_insertion_point(class_scope:devices.Imu)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float timestamp_;
  float x_;
  float y_;
  float z_;
  float scale_;
  friend struct ::TableStruct_devices_2eproto;
};
// -------------------------------------------------------------------

class Encoder PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:devices.Encoder) */ {
 public:
  inline Encoder() : Encoder(nullptr) {}
  virtual ~Encoder();
  explicit constexpr Encoder(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Encoder(const Encoder& from);
  Encoder(Encoder&& from) noexcept
    : Encoder() {
    *this = ::std::move(from);
  }

  inline Encoder& operator=(const Encoder& from) {
    CopyFrom(from);
    return *this;
  }
  inline Encoder& operator=(Encoder&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Encoder& default_instance() {
    return *internal_default_instance();
  }
  static inline const Encoder* internal_default_instance() {
    return reinterpret_cast<const Encoder*>(
               &_Encoder_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Encoder& a, Encoder& b) {
    a.Swap(&b);
  }
  inline void Swap(Encoder* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Encoder* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Encoder* New() const final {
    return CreateMaybeMessage<Encoder>(nullptr);
  }

  Encoder* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Encoder>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Encoder& from);
  void MergeFrom(const Encoder& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Encoder* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "devices.Encoder";
  }
  protected:
  explicit Encoder(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_devices_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimestampFieldNumber = 1,
    kRadsFieldNumber = 2,
    kKmFieldNumber = 3,
    kRotationsFieldNumber = 4,
  };
  // float timestamp = 1;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  float timestamp() const;
  void set_timestamp(float value);
  private:
  float _internal_timestamp() const;
  void _internal_set_timestamp(float value);
  public:

  // float rads = 2;
  bool has_rads() const;
  private:
  bool _internal_has_rads() const;
  public:
  void clear_rads();
  float rads() const;
  void set_rads(float value);
  private:
  float _internal_rads() const;
  void _internal_set_rads(float value);
  public:

  // float km = 3;
  bool has_km() const;
  private:
  bool _internal_has_km() const;
  public:
  void clear_km();
  float km() const;
  void set_km(float value);
  private:
  float _internal_km() const;
  void _internal_set_km(float value);
  public:

  // float rotations = 4;
  bool has_rotations() const;
  private:
  bool _internal_has_rotations() const;
  public:
  void clear_rotations();
  float rotations() const;
  void set_rotations(float value);
  private:
  float _internal_rotations() const;
  void _internal_set_rotations(float value);
  public:

  // @@protoc_insertion_point(class_scope:devices.Encoder)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float timestamp_;
  float rads_;
  float km_;
  float rotations_;
  friend struct ::TableStruct_devices_2eproto;
};
// -------------------------------------------------------------------

class Steer PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:devices.Steer) */ {
 public:
  inline Steer() : Steer(nullptr) {}
  virtual ~Steer();
  explicit constexpr Steer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Steer(const Steer& from);
  Steer(Steer&& from) noexcept
    : Steer() {
    *this = ::std::move(from);
  }

  inline Steer& operator=(const Steer& from) {
    CopyFrom(from);
    return *this;
  }
  inline Steer& operator=(Steer&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Steer& default_instance() {
    return *internal_default_instance();
  }
  static inline const Steer* internal_default_instance() {
    return reinterpret_cast<const Steer*>(
               &_Steer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Steer& a, Steer& b) {
    a.Swap(&b);
  }
  inline void Swap(Steer* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Steer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Steer* New() const final {
    return CreateMaybeMessage<Steer>(nullptr);
  }

  Steer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Steer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Steer& from);
  void MergeFrom(const Steer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Steer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "devices.Steer";
  }
  protected:
  explicit Steer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_devices_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimestampFieldNumber = 1,
    kAngleFieldNumber = 2,
  };
  // float timestamp = 1;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  float timestamp() const;
  void set_timestamp(float value);
  private:
  float _internal_timestamp() const;
  void _internal_set_timestamp(float value);
  public:

  // float angle = 2;
  bool has_angle() const;
  private:
  bool _internal_has_angle() const;
  public:
  void clear_angle();
  float angle() const;
  void set_angle(float value);
  private:
  float _internal_angle() const;
  void _internal_set_angle(float value);
  public:

  // @@protoc_insertion_point(class_scope:devices.Steer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float timestamp_;
  float angle_;
  friend struct ::TableStruct_devices_2eproto;
};
// -------------------------------------------------------------------

class Pedals PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:devices.Pedals) */ {
 public:
  inline Pedals() : Pedals(nullptr) {}
  virtual ~Pedals();
  explicit constexpr Pedals(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Pedals(const Pedals& from);
  Pedals(Pedals&& from) noexcept
    : Pedals() {
    *this = ::std::move(from);
  }

  inline Pedals& operator=(const Pedals& from) {
    CopyFrom(from);
    return *this;
  }
  inline Pedals& operator=(Pedals&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Pedals& default_instance() {
    return *internal_default_instance();
  }
  static inline const Pedals* internal_default_instance() {
    return reinterpret_cast<const Pedals*>(
               &_Pedals_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Pedals& a, Pedals& b) {
    a.Swap(&b);
  }
  inline void Swap(Pedals* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Pedals* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Pedals* New() const final {
    return CreateMaybeMessage<Pedals>(nullptr);
  }

  Pedals* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Pedals>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Pedals& from);
  void MergeFrom(const Pedals& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pedals* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "devices.Pedals";
  }
  protected:
  explicit Pedals(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_devices_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimestampFieldNumber = 1,
    kThrottle1FieldNumber = 2,
    kThrottle2FieldNumber = 3,
    kBrakeFrontFieldNumber = 4,
    kBrakeRearFieldNumber = 5,
  };
  // float timestamp = 1;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  float timestamp() const;
  void set_timestamp(float value);
  private:
  float _internal_timestamp() const;
  void _internal_set_timestamp(float value);
  public:

  // float throttle1 = 2;
  bool has_throttle1() const;
  private:
  bool _internal_has_throttle1() const;
  public:
  void clear_throttle1();
  float throttle1() const;
  void set_throttle1(float value);
  private:
  float _internal_throttle1() const;
  void _internal_set_throttle1(float value);
  public:

  // float throttle2 = 3;
  bool has_throttle2() const;
  private:
  bool _internal_has_throttle2() const;
  public:
  void clear_throttle2();
  float throttle2() const;
  void set_throttle2(float value);
  private:
  float _internal_throttle2() const;
  void _internal_set_throttle2(float value);
  public:

  // float brake_front = 4;
  bool has_brake_front() const;
  private:
  bool _internal_has_brake_front() const;
  public:
  void clear_brake_front();
  float brake_front() const;
  void set_brake_front(float value);
  private:
  float _internal_brake_front() const;
  void _internal_set_brake_front(float value);
  public:

  // float brake_rear = 5;
  bool has_brake_rear() const;
  private:
  bool _internal_has_brake_rear() const;
  public:
  void clear_brake_rear();
  float brake_rear() const;
  void set_brake_rear(float value);
  private:
  float _internal_brake_rear() const;
  void _internal_set_brake_rear(float value);
  public:

  // @@protoc_insertion_point(class_scope:devices.Pedals)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float timestamp_;
  float throttle1_;
  float throttle2_;
  float brake_front_;
  float brake_rear_;
  friend struct ::TableStruct_devices_2eproto;
};
// -------------------------------------------------------------------

class Inverter PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:devices.Inverter) */ {
 public:
  inline Inverter() : Inverter(nullptr) {}
  virtual ~Inverter();
  explicit constexpr Inverter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Inverter(const Inverter& from);
  Inverter(Inverter&& from) noexcept
    : Inverter() {
    *this = ::std::move(from);
  }

  inline Inverter& operator=(const Inverter& from) {
    CopyFrom(from);
    return *this;
  }
  inline Inverter& operator=(Inverter&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Inverter& default_instance() {
    return *internal_default_instance();
  }
  static inline const Inverter* internal_default_instance() {
    return reinterpret_cast<const Inverter*>(
               &_Inverter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Inverter& a, Inverter& b) {
    a.Swap(&b);
  }
  inline void Swap(Inverter* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Inverter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Inverter* New() const final {
    return CreateMaybeMessage<Inverter>(nullptr);
  }

  Inverter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Inverter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Inverter& from);
  void MergeFrom(const Inverter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Inverter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "devices.Inverter";
  }
  protected:
  explicit Inverter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_devices_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimestampFieldNumber = 1,
    kTemperatureFieldNumber = 2,
    kMotorTempFieldNumber = 3,
    kTorqueFieldNumber = 4,
    kSpeedFieldNumber = 5,
  };
  // float timestamp = 1;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  float timestamp() const;
  void set_timestamp(float value);
  private:
  float _internal_timestamp() const;
  void _internal_set_timestamp(float value);
  public:

  // float temperature = 2;
  bool has_temperature() const;
  private:
  bool _internal_has_temperature() const;
  public:
  void clear_temperature();
  float temperature() const;
  void set_temperature(float value);
  private:
  float _internal_temperature() const;
  void _internal_set_temperature(float value);
  public:

  // float motor_temp = 3;
  bool has_motor_temp() const;
  private:
  bool _internal_has_motor_temp() const;
  public:
  void clear_motor_temp();
  float motor_temp() const;
  void set_motor_temp(float value);
  private:
  float _internal_motor_temp() const;
  void _internal_set_motor_temp(float value);
  public:

  // float torque = 4;
  bool has_torque() const;
  private:
  bool _internal_has_torque() const;
  public:
  void clear_torque();
  float torque() const;
  void set_torque(float value);
  private:
  float _internal_torque() const;
  void _internal_set_torque(float value);
  public:

  // float speed = 5;
  bool has_speed() const;
  private:
  bool _internal_has_speed() const;
  public:
  void clear_speed();
  float speed() const;
  void set_speed(float value);
  private:
  float _internal_speed() const;
  void _internal_set_speed(float value);
  public:

  // @@protoc_insertion_point(class_scope:devices.Inverter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float timestamp_;
  float temperature_;
  float motor_temp_;
  float torque_;
  float speed_;
  friend struct ::TableStruct_devices_2eproto;
};
// -------------------------------------------------------------------

class Bms PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:devices.Bms) */ {
 public:
  inline Bms() : Bms(nullptr) {}
  virtual ~Bms();
  explicit constexpr Bms(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Bms(const Bms& from);
  Bms(Bms&& from) noexcept
    : Bms() {
    *this = ::std::move(from);
  }

  inline Bms& operator=(const Bms& from) {
    CopyFrom(from);
    return *this;
  }
  inline Bms& operator=(Bms&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Bms& default_instance() {
    return *internal_default_instance();
  }
  static inline const Bms* internal_default_instance() {
    return reinterpret_cast<const Bms*>(
               &_Bms_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Bms& a, Bms& b) {
    a.Swap(&b);
  }
  inline void Swap(Bms* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Bms* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Bms* New() const final {
    return CreateMaybeMessage<Bms>(nullptr);
  }

  Bms* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Bms>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Bms& from);
  void MergeFrom(const Bms& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Bms* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "devices.Bms";
  }
  protected:
  explicit Bms(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_devices_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimestampFieldNumber = 1,
    kTemperatureFieldNumber = 2,
    kMaxTemperatureFieldNumber = 3,
    kCurrentFieldNumber = 4,
    kVoltageFieldNumber = 5,
    kPowerFieldNumber = 6,
  };
  // float timestamp = 1;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  float timestamp() const;
  void set_timestamp(float value);
  private:
  float _internal_timestamp() const;
  void _internal_set_timestamp(float value);
  public:

  // float temperature = 2;
  bool has_temperature() const;
  private:
  bool _internal_has_temperature() const;
  public:
  void clear_temperature();
  float temperature() const;
  void set_temperature(float value);
  private:
  float _internal_temperature() const;
  void _internal_set_temperature(float value);
  public:

  // float max_temperature = 3;
  bool has_max_temperature() const;
  private:
  bool _internal_has_max_temperature() const;
  public:
  void clear_max_temperature();
  float max_temperature() const;
  void set_max_temperature(float value);
  private:
  float _internal_max_temperature() const;
  void _internal_set_max_temperature(float value);
  public:

  // float current = 4;
  bool has_current() const;
  private:
  bool _internal_has_current() const;
  public:
  void clear_current();
  float current() const;
  void set_current(float value);
  private:
  float _internal_current() const;
  void _internal_set_current(float value);
  public:

  // float voltage = 5;
  bool has_voltage() const;
  private:
  bool _internal_has_voltage() const;
  public:
  void clear_voltage();
  float voltage() const;
  void set_voltage(float value);
  private:
  float _internal_voltage() const;
  void _internal_set_voltage(float value);
  public:

  // float power = 6;
  bool has_power() const;
  private:
  bool _internal_has_power() const;
  public:
  void clear_power();
  float power() const;
  void set_power(float value);
  private:
  float _internal_power() const;
  void _internal_set_power(float value);
  public:

  // @@protoc_insertion_point(class_scope:devices.Bms)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float timestamp_;
  float temperature_;
  float max_temperature_;
  float current_;
  float voltage_;
  float power_;
  friend struct ::TableStruct_devices_2eproto;
};
// -------------------------------------------------------------------

class Ecu PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:devices.Ecu) */ {
 public:
  inline Ecu() : Ecu(nullptr) {}
  virtual ~Ecu();
  explicit constexpr Ecu(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Ecu(const Ecu& from);
  Ecu(Ecu&& from) noexcept
    : Ecu() {
    *this = ::std::move(from);
  }

  inline Ecu& operator=(const Ecu& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ecu& operator=(Ecu&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Ecu& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ecu* internal_default_instance() {
    return reinterpret_cast<const Ecu*>(
               &_Ecu_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Ecu& a, Ecu& b) {
    a.Swap(&b);
  }
  inline void Swap(Ecu* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ecu* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Ecu* New() const final {
    return CreateMaybeMessage<Ecu>(nullptr);
  }

  Ecu* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Ecu>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Ecu& from);
  void MergeFrom(const Ecu& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ecu* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "devices.Ecu";
  }
  protected:
  explicit Ecu(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_devices_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimestampFieldNumber = 1,
  };
  // float timestamp = 1;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  float timestamp() const;
  void set_timestamp(float value);
  private:
  float _internal_timestamp() const;
  void _internal_set_timestamp(float value);
  public:

  // @@protoc_insertion_point(class_scope:devices.Ecu)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float timestamp_;
  friend struct ::TableStruct_devices_2eproto;
};
// -------------------------------------------------------------------

class Chimera PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:devices.Chimera) */ {
 public:
  inline Chimera() : Chimera(nullptr) {}
  virtual ~Chimera();
  explicit constexpr Chimera(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Chimera(const Chimera& from);
  Chimera(Chimera&& from) noexcept
    : Chimera() {
    *this = ::std::move(from);
  }

  inline Chimera& operator=(const Chimera& from) {
    CopyFrom(from);
    return *this;
  }
  inline Chimera& operator=(Chimera&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Chimera& default_instance() {
    return *internal_default_instance();
  }
  static inline const Chimera* internal_default_instance() {
    return reinterpret_cast<const Chimera*>(
               &_Chimera_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Chimera& a, Chimera& b) {
    a.Swap(&b);
  }
  inline void Swap(Chimera* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Chimera* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Chimera* New() const final {
    return CreateMaybeMessage<Chimera>(nullptr);
  }

  Chimera* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Chimera>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Chimera& from);
  void MergeFrom(const Chimera& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Chimera* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "devices.Chimera";
  }
  protected:
  explicit Chimera(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_devices_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccelFieldNumber = 1,
    kGyroFieldNumber = 2,
    kEncoderLeftFieldNumber = 3,
    kEncoderRightFieldNumber = 4,
    kBmsLvFieldNumber = 5,
    kBmsHvFieldNumber = 6,
    kInverterLeftFieldNumber = 7,
    kInverterRightFieldNumber = 8,
    kPedalFieldNumber = 9,
    kSteerFieldNumber = 10,
    kEcuFieldNumber = 11,
  };
  // repeated .devices.Imu accel = 1;
  int accel_size() const;
  private:
  int _internal_accel_size() const;
  public:
  void clear_accel();
  ::devices::Imu* mutable_accel(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::devices::Imu >*
      mutable_accel();
  private:
  const ::devices::Imu& _internal_accel(int index) const;
  ::devices::Imu* _internal_add_accel();
  public:
  const ::devices::Imu& accel(int index) const;
  ::devices::Imu* add_accel();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::devices::Imu >&
      accel() const;

  // repeated .devices.Imu gyro = 2;
  int gyro_size() const;
  private:
  int _internal_gyro_size() const;
  public:
  void clear_gyro();
  ::devices::Imu* mutable_gyro(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::devices::Imu >*
      mutable_gyro();
  private:
  const ::devices::Imu& _internal_gyro(int index) const;
  ::devices::Imu* _internal_add_gyro();
  public:
  const ::devices::Imu& gyro(int index) const;
  ::devices::Imu* add_gyro();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::devices::Imu >&
      gyro() const;

  // repeated .devices.Encoder encoder_left = 3;
  int encoder_left_size() const;
  private:
  int _internal_encoder_left_size() const;
  public:
  void clear_encoder_left();
  ::devices::Encoder* mutable_encoder_left(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::devices::Encoder >*
      mutable_encoder_left();
  private:
  const ::devices::Encoder& _internal_encoder_left(int index) const;
  ::devices::Encoder* _internal_add_encoder_left();
  public:
  const ::devices::Encoder& encoder_left(int index) const;
  ::devices::Encoder* add_encoder_left();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::devices::Encoder >&
      encoder_left() const;

  // repeated .devices.Encoder encoder_right = 4;
  int encoder_right_size() const;
  private:
  int _internal_encoder_right_size() const;
  public:
  void clear_encoder_right();
  ::devices::Encoder* mutable_encoder_right(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::devices::Encoder >*
      mutable_encoder_right();
  private:
  const ::devices::Encoder& _internal_encoder_right(int index) const;
  ::devices::Encoder* _internal_add_encoder_right();
  public:
  const ::devices::Encoder& encoder_right(int index) const;
  ::devices::Encoder* add_encoder_right();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::devices::Encoder >&
      encoder_right() const;

  // repeated .devices.Bms bms_lv = 5;
  int bms_lv_size() const;
  private:
  int _internal_bms_lv_size() const;
  public:
  void clear_bms_lv();
  ::devices::Bms* mutable_bms_lv(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::devices::Bms >*
      mutable_bms_lv();
  private:
  const ::devices::Bms& _internal_bms_lv(int index) const;
  ::devices::Bms* _internal_add_bms_lv();
  public:
  const ::devices::Bms& bms_lv(int index) const;
  ::devices::Bms* add_bms_lv();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::devices::Bms >&
      bms_lv() const;

  // repeated .devices.Bms bms_hv = 6;
  int bms_hv_size() const;
  private:
  int _internal_bms_hv_size() const;
  public:
  void clear_bms_hv();
  ::devices::Bms* mutable_bms_hv(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::devices::Bms >*
      mutable_bms_hv();
  private:
  const ::devices::Bms& _internal_bms_hv(int index) const;
  ::devices::Bms* _internal_add_bms_hv();
  public:
  const ::devices::Bms& bms_hv(int index) const;
  ::devices::Bms* add_bms_hv();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::devices::Bms >&
      bms_hv() const;

  // repeated .devices.Inverter inverter_left = 7;
  int inverter_left_size() const;
  private:
  int _internal_inverter_left_size() const;
  public:
  void clear_inverter_left();
  ::devices::Inverter* mutable_inverter_left(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::devices::Inverter >*
      mutable_inverter_left();
  private:
  const ::devices::Inverter& _internal_inverter_left(int index) const;
  ::devices::Inverter* _internal_add_inverter_left();
  public:
  const ::devices::Inverter& inverter_left(int index) const;
  ::devices::Inverter* add_inverter_left();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::devices::Inverter >&
      inverter_left() const;

  // repeated .devices.Inverter inverter_right = 8;
  int inverter_right_size() const;
  private:
  int _internal_inverter_right_size() const;
  public:
  void clear_inverter_right();
  ::devices::Inverter* mutable_inverter_right(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::devices::Inverter >*
      mutable_inverter_right();
  private:
  const ::devices::Inverter& _internal_inverter_right(int index) const;
  ::devices::Inverter* _internal_add_inverter_right();
  public:
  const ::devices::Inverter& inverter_right(int index) const;
  ::devices::Inverter* add_inverter_right();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::devices::Inverter >&
      inverter_right() const;

  // repeated .devices.Pedals pedal = 9;
  int pedal_size() const;
  private:
  int _internal_pedal_size() const;
  public:
  void clear_pedal();
  ::devices::Pedals* mutable_pedal(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::devices::Pedals >*
      mutable_pedal();
  private:
  const ::devices::Pedals& _internal_pedal(int index) const;
  ::devices::Pedals* _internal_add_pedal();
  public:
  const ::devices::Pedals& pedal(int index) const;
  ::devices::Pedals* add_pedal();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::devices::Pedals >&
      pedal() const;

  // repeated .devices.Steer steer = 10;
  int steer_size() const;
  private:
  int _internal_steer_size() const;
  public:
  void clear_steer();
  ::devices::Steer* mutable_steer(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::devices::Steer >*
      mutable_steer();
  private:
  const ::devices::Steer& _internal_steer(int index) const;
  ::devices::Steer* _internal_add_steer();
  public:
  const ::devices::Steer& steer(int index) const;
  ::devices::Steer* add_steer();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::devices::Steer >&
      steer() const;

  // repeated .devices.Ecu ecu = 11;
  int ecu_size() const;
  private:
  int _internal_ecu_size() const;
  public:
  void clear_ecu();
  ::devices::Ecu* mutable_ecu(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::devices::Ecu >*
      mutable_ecu();
  private:
  const ::devices::Ecu& _internal_ecu(int index) const;
  ::devices::Ecu* _internal_add_ecu();
  public:
  const ::devices::Ecu& ecu(int index) const;
  ::devices::Ecu* add_ecu();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::devices::Ecu >&
      ecu() const;

  // @@protoc_insertion_point(class_scope:devices.Chimera)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::devices::Imu > accel_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::devices::Imu > gyro_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::devices::Encoder > encoder_left_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::devices::Encoder > encoder_right_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::devices::Bms > bms_lv_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::devices::Bms > bms_hv_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::devices::Inverter > inverter_left_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::devices::Inverter > inverter_right_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::devices::Pedals > pedal_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::devices::Steer > steer_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::devices::Ecu > ecu_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_devices_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Imu

// float timestamp = 1;
inline bool Imu::_internal_has_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Imu::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void Imu::clear_timestamp() {
  timestamp_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float Imu::_internal_timestamp() const {
  return timestamp_;
}
inline float Imu::timestamp() const {
  // @@protoc_insertion_point(field_get:devices.Imu.timestamp)
  return _internal_timestamp();
}
inline void Imu::_internal_set_timestamp(float value) {
  _has_bits_[0] |= 0x00000001u;
  timestamp_ = value;
}
inline void Imu::set_timestamp(float value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:devices.Imu.timestamp)
}

// float x = 2;
inline bool Imu::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Imu::has_x() const {
  return _internal_has_x();
}
inline void Imu::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float Imu::_internal_x() const {
  return x_;
}
inline float Imu::x() const {
  // @@protoc_insertion_point(field_get:devices.Imu.x)
  return _internal_x();
}
inline void Imu::_internal_set_x(float value) {
  _has_bits_[0] |= 0x00000002u;
  x_ = value;
}
inline void Imu::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:devices.Imu.x)
}

// float y = 3;
inline bool Imu::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Imu::has_y() const {
  return _internal_has_y();
}
inline void Imu::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float Imu::_internal_y() const {
  return y_;
}
inline float Imu::y() const {
  // @@protoc_insertion_point(field_get:devices.Imu.y)
  return _internal_y();
}
inline void Imu::_internal_set_y(float value) {
  _has_bits_[0] |= 0x00000004u;
  y_ = value;
}
inline void Imu::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:devices.Imu.y)
}

// float z = 4;
inline bool Imu::_internal_has_z() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Imu::has_z() const {
  return _internal_has_z();
}
inline void Imu::clear_z() {
  z_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float Imu::_internal_z() const {
  return z_;
}
inline float Imu::z() const {
  // @@protoc_insertion_point(field_get:devices.Imu.z)
  return _internal_z();
}
inline void Imu::_internal_set_z(float value) {
  _has_bits_[0] |= 0x00000008u;
  z_ = value;
}
inline void Imu::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:devices.Imu.z)
}

// float scale = 5;
inline bool Imu::_internal_has_scale() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Imu::has_scale() const {
  return _internal_has_scale();
}
inline void Imu::clear_scale() {
  scale_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float Imu::_internal_scale() const {
  return scale_;
}
inline float Imu::scale() const {
  // @@protoc_insertion_point(field_get:devices.Imu.scale)
  return _internal_scale();
}
inline void Imu::_internal_set_scale(float value) {
  _has_bits_[0] |= 0x00000010u;
  scale_ = value;
}
inline void Imu::set_scale(float value) {
  _internal_set_scale(value);
  // @@protoc_insertion_point(field_set:devices.Imu.scale)
}

// -------------------------------------------------------------------

// Encoder

// float timestamp = 1;
inline bool Encoder::_internal_has_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Encoder::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void Encoder::clear_timestamp() {
  timestamp_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float Encoder::_internal_timestamp() const {
  return timestamp_;
}
inline float Encoder::timestamp() const {
  // @@protoc_insertion_point(field_get:devices.Encoder.timestamp)
  return _internal_timestamp();
}
inline void Encoder::_internal_set_timestamp(float value) {
  _has_bits_[0] |= 0x00000001u;
  timestamp_ = value;
}
inline void Encoder::set_timestamp(float value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:devices.Encoder.timestamp)
}

// float rads = 2;
inline bool Encoder::_internal_has_rads() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Encoder::has_rads() const {
  return _internal_has_rads();
}
inline void Encoder::clear_rads() {
  rads_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float Encoder::_internal_rads() const {
  return rads_;
}
inline float Encoder::rads() const {
  // @@protoc_insertion_point(field_get:devices.Encoder.rads)
  return _internal_rads();
}
inline void Encoder::_internal_set_rads(float value) {
  _has_bits_[0] |= 0x00000002u;
  rads_ = value;
}
inline void Encoder::set_rads(float value) {
  _internal_set_rads(value);
  // @@protoc_insertion_point(field_set:devices.Encoder.rads)
}

// float km = 3;
inline bool Encoder::_internal_has_km() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Encoder::has_km() const {
  return _internal_has_km();
}
inline void Encoder::clear_km() {
  km_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float Encoder::_internal_km() const {
  return km_;
}
inline float Encoder::km() const {
  // @@protoc_insertion_point(field_get:devices.Encoder.km)
  return _internal_km();
}
inline void Encoder::_internal_set_km(float value) {
  _has_bits_[0] |= 0x00000004u;
  km_ = value;
}
inline void Encoder::set_km(float value) {
  _internal_set_km(value);
  // @@protoc_insertion_point(field_set:devices.Encoder.km)
}

// float rotations = 4;
inline bool Encoder::_internal_has_rotations() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Encoder::has_rotations() const {
  return _internal_has_rotations();
}
inline void Encoder::clear_rotations() {
  rotations_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float Encoder::_internal_rotations() const {
  return rotations_;
}
inline float Encoder::rotations() const {
  // @@protoc_insertion_point(field_get:devices.Encoder.rotations)
  return _internal_rotations();
}
inline void Encoder::_internal_set_rotations(float value) {
  _has_bits_[0] |= 0x00000008u;
  rotations_ = value;
}
inline void Encoder::set_rotations(float value) {
  _internal_set_rotations(value);
  // @@protoc_insertion_point(field_set:devices.Encoder.rotations)
}

// -------------------------------------------------------------------

// Steer

// float timestamp = 1;
inline bool Steer::_internal_has_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Steer::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void Steer::clear_timestamp() {
  timestamp_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float Steer::_internal_timestamp() const {
  return timestamp_;
}
inline float Steer::timestamp() const {
  // @@protoc_insertion_point(field_get:devices.Steer.timestamp)
  return _internal_timestamp();
}
inline void Steer::_internal_set_timestamp(float value) {
  _has_bits_[0] |= 0x00000001u;
  timestamp_ = value;
}
inline void Steer::set_timestamp(float value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:devices.Steer.timestamp)
}

// float angle = 2;
inline bool Steer::_internal_has_angle() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Steer::has_angle() const {
  return _internal_has_angle();
}
inline void Steer::clear_angle() {
  angle_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float Steer::_internal_angle() const {
  return angle_;
}
inline float Steer::angle() const {
  // @@protoc_insertion_point(field_get:devices.Steer.angle)
  return _internal_angle();
}
inline void Steer::_internal_set_angle(float value) {
  _has_bits_[0] |= 0x00000002u;
  angle_ = value;
}
inline void Steer::set_angle(float value) {
  _internal_set_angle(value);
  // @@protoc_insertion_point(field_set:devices.Steer.angle)
}

// -------------------------------------------------------------------

// Pedals

// float timestamp = 1;
inline bool Pedals::_internal_has_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Pedals::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void Pedals::clear_timestamp() {
  timestamp_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float Pedals::_internal_timestamp() const {
  return timestamp_;
}
inline float Pedals::timestamp() const {
  // @@protoc_insertion_point(field_get:devices.Pedals.timestamp)
  return _internal_timestamp();
}
inline void Pedals::_internal_set_timestamp(float value) {
  _has_bits_[0] |= 0x00000001u;
  timestamp_ = value;
}
inline void Pedals::set_timestamp(float value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:devices.Pedals.timestamp)
}

// float throttle1 = 2;
inline bool Pedals::_internal_has_throttle1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Pedals::has_throttle1() const {
  return _internal_has_throttle1();
}
inline void Pedals::clear_throttle1() {
  throttle1_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float Pedals::_internal_throttle1() const {
  return throttle1_;
}
inline float Pedals::throttle1() const {
  // @@protoc_insertion_point(field_get:devices.Pedals.throttle1)
  return _internal_throttle1();
}
inline void Pedals::_internal_set_throttle1(float value) {
  _has_bits_[0] |= 0x00000002u;
  throttle1_ = value;
}
inline void Pedals::set_throttle1(float value) {
  _internal_set_throttle1(value);
  // @@protoc_insertion_point(field_set:devices.Pedals.throttle1)
}

// float throttle2 = 3;
inline bool Pedals::_internal_has_throttle2() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Pedals::has_throttle2() const {
  return _internal_has_throttle2();
}
inline void Pedals::clear_throttle2() {
  throttle2_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float Pedals::_internal_throttle2() const {
  return throttle2_;
}
inline float Pedals::throttle2() const {
  // @@protoc_insertion_point(field_get:devices.Pedals.throttle2)
  return _internal_throttle2();
}
inline void Pedals::_internal_set_throttle2(float value) {
  _has_bits_[0] |= 0x00000004u;
  throttle2_ = value;
}
inline void Pedals::set_throttle2(float value) {
  _internal_set_throttle2(value);
  // @@protoc_insertion_point(field_set:devices.Pedals.throttle2)
}

// float brake_front = 4;
inline bool Pedals::_internal_has_brake_front() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Pedals::has_brake_front() const {
  return _internal_has_brake_front();
}
inline void Pedals::clear_brake_front() {
  brake_front_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float Pedals::_internal_brake_front() const {
  return brake_front_;
}
inline float Pedals::brake_front() const {
  // @@protoc_insertion_point(field_get:devices.Pedals.brake_front)
  return _internal_brake_front();
}
inline void Pedals::_internal_set_brake_front(float value) {
  _has_bits_[0] |= 0x00000008u;
  brake_front_ = value;
}
inline void Pedals::set_brake_front(float value) {
  _internal_set_brake_front(value);
  // @@protoc_insertion_point(field_set:devices.Pedals.brake_front)
}

// float brake_rear = 5;
inline bool Pedals::_internal_has_brake_rear() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Pedals::has_brake_rear() const {
  return _internal_has_brake_rear();
}
inline void Pedals::clear_brake_rear() {
  brake_rear_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float Pedals::_internal_brake_rear() const {
  return brake_rear_;
}
inline float Pedals::brake_rear() const {
  // @@protoc_insertion_point(field_get:devices.Pedals.brake_rear)
  return _internal_brake_rear();
}
inline void Pedals::_internal_set_brake_rear(float value) {
  _has_bits_[0] |= 0x00000010u;
  brake_rear_ = value;
}
inline void Pedals::set_brake_rear(float value) {
  _internal_set_brake_rear(value);
  // @@protoc_insertion_point(field_set:devices.Pedals.brake_rear)
}

// -------------------------------------------------------------------

// Inverter

// float timestamp = 1;
inline bool Inverter::_internal_has_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Inverter::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void Inverter::clear_timestamp() {
  timestamp_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float Inverter::_internal_timestamp() const {
  return timestamp_;
}
inline float Inverter::timestamp() const {
  // @@protoc_insertion_point(field_get:devices.Inverter.timestamp)
  return _internal_timestamp();
}
inline void Inverter::_internal_set_timestamp(float value) {
  _has_bits_[0] |= 0x00000001u;
  timestamp_ = value;
}
inline void Inverter::set_timestamp(float value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:devices.Inverter.timestamp)
}

// float temperature = 2;
inline bool Inverter::_internal_has_temperature() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Inverter::has_temperature() const {
  return _internal_has_temperature();
}
inline void Inverter::clear_temperature() {
  temperature_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float Inverter::_internal_temperature() const {
  return temperature_;
}
inline float Inverter::temperature() const {
  // @@protoc_insertion_point(field_get:devices.Inverter.temperature)
  return _internal_temperature();
}
inline void Inverter::_internal_set_temperature(float value) {
  _has_bits_[0] |= 0x00000002u;
  temperature_ = value;
}
inline void Inverter::set_temperature(float value) {
  _internal_set_temperature(value);
  // @@protoc_insertion_point(field_set:devices.Inverter.temperature)
}

// float motor_temp = 3;
inline bool Inverter::_internal_has_motor_temp() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Inverter::has_motor_temp() const {
  return _internal_has_motor_temp();
}
inline void Inverter::clear_motor_temp() {
  motor_temp_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float Inverter::_internal_motor_temp() const {
  return motor_temp_;
}
inline float Inverter::motor_temp() const {
  // @@protoc_insertion_point(field_get:devices.Inverter.motor_temp)
  return _internal_motor_temp();
}
inline void Inverter::_internal_set_motor_temp(float value) {
  _has_bits_[0] |= 0x00000004u;
  motor_temp_ = value;
}
inline void Inverter::set_motor_temp(float value) {
  _internal_set_motor_temp(value);
  // @@protoc_insertion_point(field_set:devices.Inverter.motor_temp)
}

// float torque = 4;
inline bool Inverter::_internal_has_torque() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Inverter::has_torque() const {
  return _internal_has_torque();
}
inline void Inverter::clear_torque() {
  torque_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float Inverter::_internal_torque() const {
  return torque_;
}
inline float Inverter::torque() const {
  // @@protoc_insertion_point(field_get:devices.Inverter.torque)
  return _internal_torque();
}
inline void Inverter::_internal_set_torque(float value) {
  _has_bits_[0] |= 0x00000008u;
  torque_ = value;
}
inline void Inverter::set_torque(float value) {
  _internal_set_torque(value);
  // @@protoc_insertion_point(field_set:devices.Inverter.torque)
}

// float speed = 5;
inline bool Inverter::_internal_has_speed() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Inverter::has_speed() const {
  return _internal_has_speed();
}
inline void Inverter::clear_speed() {
  speed_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float Inverter::_internal_speed() const {
  return speed_;
}
inline float Inverter::speed() const {
  // @@protoc_insertion_point(field_get:devices.Inverter.speed)
  return _internal_speed();
}
inline void Inverter::_internal_set_speed(float value) {
  _has_bits_[0] |= 0x00000010u;
  speed_ = value;
}
inline void Inverter::set_speed(float value) {
  _internal_set_speed(value);
  // @@protoc_insertion_point(field_set:devices.Inverter.speed)
}

// -------------------------------------------------------------------

// Bms

// float timestamp = 1;
inline bool Bms::_internal_has_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Bms::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void Bms::clear_timestamp() {
  timestamp_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float Bms::_internal_timestamp() const {
  return timestamp_;
}
inline float Bms::timestamp() const {
  // @@protoc_insertion_point(field_get:devices.Bms.timestamp)
  return _internal_timestamp();
}
inline void Bms::_internal_set_timestamp(float value) {
  _has_bits_[0] |= 0x00000001u;
  timestamp_ = value;
}
inline void Bms::set_timestamp(float value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:devices.Bms.timestamp)
}

// float temperature = 2;
inline bool Bms::_internal_has_temperature() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Bms::has_temperature() const {
  return _internal_has_temperature();
}
inline void Bms::clear_temperature() {
  temperature_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float Bms::_internal_temperature() const {
  return temperature_;
}
inline float Bms::temperature() const {
  // @@protoc_insertion_point(field_get:devices.Bms.temperature)
  return _internal_temperature();
}
inline void Bms::_internal_set_temperature(float value) {
  _has_bits_[0] |= 0x00000002u;
  temperature_ = value;
}
inline void Bms::set_temperature(float value) {
  _internal_set_temperature(value);
  // @@protoc_insertion_point(field_set:devices.Bms.temperature)
}

// float max_temperature = 3;
inline bool Bms::_internal_has_max_temperature() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Bms::has_max_temperature() const {
  return _internal_has_max_temperature();
}
inline void Bms::clear_max_temperature() {
  max_temperature_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float Bms::_internal_max_temperature() const {
  return max_temperature_;
}
inline float Bms::max_temperature() const {
  // @@protoc_insertion_point(field_get:devices.Bms.max_temperature)
  return _internal_max_temperature();
}
inline void Bms::_internal_set_max_temperature(float value) {
  _has_bits_[0] |= 0x00000004u;
  max_temperature_ = value;
}
inline void Bms::set_max_temperature(float value) {
  _internal_set_max_temperature(value);
  // @@protoc_insertion_point(field_set:devices.Bms.max_temperature)
}

// float current = 4;
inline bool Bms::_internal_has_current() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Bms::has_current() const {
  return _internal_has_current();
}
inline void Bms::clear_current() {
  current_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float Bms::_internal_current() const {
  return current_;
}
inline float Bms::current() const {
  // @@protoc_insertion_point(field_get:devices.Bms.current)
  return _internal_current();
}
inline void Bms::_internal_set_current(float value) {
  _has_bits_[0] |= 0x00000008u;
  current_ = value;
}
inline void Bms::set_current(float value) {
  _internal_set_current(value);
  // @@protoc_insertion_point(field_set:devices.Bms.current)
}

// float voltage = 5;
inline bool Bms::_internal_has_voltage() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Bms::has_voltage() const {
  return _internal_has_voltage();
}
inline void Bms::clear_voltage() {
  voltage_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float Bms::_internal_voltage() const {
  return voltage_;
}
inline float Bms::voltage() const {
  // @@protoc_insertion_point(field_get:devices.Bms.voltage)
  return _internal_voltage();
}
inline void Bms::_internal_set_voltage(float value) {
  _has_bits_[0] |= 0x00000010u;
  voltage_ = value;
}
inline void Bms::set_voltage(float value) {
  _internal_set_voltage(value);
  // @@protoc_insertion_point(field_set:devices.Bms.voltage)
}

// float power = 6;
inline bool Bms::_internal_has_power() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Bms::has_power() const {
  return _internal_has_power();
}
inline void Bms::clear_power() {
  power_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float Bms::_internal_power() const {
  return power_;
}
inline float Bms::power() const {
  // @@protoc_insertion_point(field_get:devices.Bms.power)
  return _internal_power();
}
inline void Bms::_internal_set_power(float value) {
  _has_bits_[0] |= 0x00000020u;
  power_ = value;
}
inline void Bms::set_power(float value) {
  _internal_set_power(value);
  // @@protoc_insertion_point(field_set:devices.Bms.power)
}

// -------------------------------------------------------------------

// Ecu

// float timestamp = 1;
inline bool Ecu::_internal_has_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Ecu::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void Ecu::clear_timestamp() {
  timestamp_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float Ecu::_internal_timestamp() const {
  return timestamp_;
}
inline float Ecu::timestamp() const {
  // @@protoc_insertion_point(field_get:devices.Ecu.timestamp)
  return _internal_timestamp();
}
inline void Ecu::_internal_set_timestamp(float value) {
  _has_bits_[0] |= 0x00000001u;
  timestamp_ = value;
}
inline void Ecu::set_timestamp(float value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:devices.Ecu.timestamp)
}

// -------------------------------------------------------------------

// Chimera

// repeated .devices.Imu accel = 1;
inline int Chimera::_internal_accel_size() const {
  return accel_.size();
}
inline int Chimera::accel_size() const {
  return _internal_accel_size();
}
inline void Chimera::clear_accel() {
  accel_.Clear();
}
inline ::devices::Imu* Chimera::mutable_accel(int index) {
  // @@protoc_insertion_point(field_mutable:devices.Chimera.accel)
  return accel_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::devices::Imu >*
Chimera::mutable_accel() {
  // @@protoc_insertion_point(field_mutable_list:devices.Chimera.accel)
  return &accel_;
}
inline const ::devices::Imu& Chimera::_internal_accel(int index) const {
  return accel_.Get(index);
}
inline const ::devices::Imu& Chimera::accel(int index) const {
  // @@protoc_insertion_point(field_get:devices.Chimera.accel)
  return _internal_accel(index);
}
inline ::devices::Imu* Chimera::_internal_add_accel() {
  return accel_.Add();
}
inline ::devices::Imu* Chimera::add_accel() {
  // @@protoc_insertion_point(field_add:devices.Chimera.accel)
  return _internal_add_accel();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::devices::Imu >&
Chimera::accel() const {
  // @@protoc_insertion_point(field_list:devices.Chimera.accel)
  return accel_;
}

// repeated .devices.Imu gyro = 2;
inline int Chimera::_internal_gyro_size() const {
  return gyro_.size();
}
inline int Chimera::gyro_size() const {
  return _internal_gyro_size();
}
inline void Chimera::clear_gyro() {
  gyro_.Clear();
}
inline ::devices::Imu* Chimera::mutable_gyro(int index) {
  // @@protoc_insertion_point(field_mutable:devices.Chimera.gyro)
  return gyro_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::devices::Imu >*
Chimera::mutable_gyro() {
  // @@protoc_insertion_point(field_mutable_list:devices.Chimera.gyro)
  return &gyro_;
}
inline const ::devices::Imu& Chimera::_internal_gyro(int index) const {
  return gyro_.Get(index);
}
inline const ::devices::Imu& Chimera::gyro(int index) const {
  // @@protoc_insertion_point(field_get:devices.Chimera.gyro)
  return _internal_gyro(index);
}
inline ::devices::Imu* Chimera::_internal_add_gyro() {
  return gyro_.Add();
}
inline ::devices::Imu* Chimera::add_gyro() {
  // @@protoc_insertion_point(field_add:devices.Chimera.gyro)
  return _internal_add_gyro();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::devices::Imu >&
Chimera::gyro() const {
  // @@protoc_insertion_point(field_list:devices.Chimera.gyro)
  return gyro_;
}

// repeated .devices.Encoder encoder_left = 3;
inline int Chimera::_internal_encoder_left_size() const {
  return encoder_left_.size();
}
inline int Chimera::encoder_left_size() const {
  return _internal_encoder_left_size();
}
inline void Chimera::clear_encoder_left() {
  encoder_left_.Clear();
}
inline ::devices::Encoder* Chimera::mutable_encoder_left(int index) {
  // @@protoc_insertion_point(field_mutable:devices.Chimera.encoder_left)
  return encoder_left_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::devices::Encoder >*
Chimera::mutable_encoder_left() {
  // @@protoc_insertion_point(field_mutable_list:devices.Chimera.encoder_left)
  return &encoder_left_;
}
inline const ::devices::Encoder& Chimera::_internal_encoder_left(int index) const {
  return encoder_left_.Get(index);
}
inline const ::devices::Encoder& Chimera::encoder_left(int index) const {
  // @@protoc_insertion_point(field_get:devices.Chimera.encoder_left)
  return _internal_encoder_left(index);
}
inline ::devices::Encoder* Chimera::_internal_add_encoder_left() {
  return encoder_left_.Add();
}
inline ::devices::Encoder* Chimera::add_encoder_left() {
  // @@protoc_insertion_point(field_add:devices.Chimera.encoder_left)
  return _internal_add_encoder_left();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::devices::Encoder >&
Chimera::encoder_left() const {
  // @@protoc_insertion_point(field_list:devices.Chimera.encoder_left)
  return encoder_left_;
}

// repeated .devices.Encoder encoder_right = 4;
inline int Chimera::_internal_encoder_right_size() const {
  return encoder_right_.size();
}
inline int Chimera::encoder_right_size() const {
  return _internal_encoder_right_size();
}
inline void Chimera::clear_encoder_right() {
  encoder_right_.Clear();
}
inline ::devices::Encoder* Chimera::mutable_encoder_right(int index) {
  // @@protoc_insertion_point(field_mutable:devices.Chimera.encoder_right)
  return encoder_right_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::devices::Encoder >*
Chimera::mutable_encoder_right() {
  // @@protoc_insertion_point(field_mutable_list:devices.Chimera.encoder_right)
  return &encoder_right_;
}
inline const ::devices::Encoder& Chimera::_internal_encoder_right(int index) const {
  return encoder_right_.Get(index);
}
inline const ::devices::Encoder& Chimera::encoder_right(int index) const {
  // @@protoc_insertion_point(field_get:devices.Chimera.encoder_right)
  return _internal_encoder_right(index);
}
inline ::devices::Encoder* Chimera::_internal_add_encoder_right() {
  return encoder_right_.Add();
}
inline ::devices::Encoder* Chimera::add_encoder_right() {
  // @@protoc_insertion_point(field_add:devices.Chimera.encoder_right)
  return _internal_add_encoder_right();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::devices::Encoder >&
Chimera::encoder_right() const {
  // @@protoc_insertion_point(field_list:devices.Chimera.encoder_right)
  return encoder_right_;
}

// repeated .devices.Bms bms_lv = 5;
inline int Chimera::_internal_bms_lv_size() const {
  return bms_lv_.size();
}
inline int Chimera::bms_lv_size() const {
  return _internal_bms_lv_size();
}
inline void Chimera::clear_bms_lv() {
  bms_lv_.Clear();
}
inline ::devices::Bms* Chimera::mutable_bms_lv(int index) {
  // @@protoc_insertion_point(field_mutable:devices.Chimera.bms_lv)
  return bms_lv_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::devices::Bms >*
Chimera::mutable_bms_lv() {
  // @@protoc_insertion_point(field_mutable_list:devices.Chimera.bms_lv)
  return &bms_lv_;
}
inline const ::devices::Bms& Chimera::_internal_bms_lv(int index) const {
  return bms_lv_.Get(index);
}
inline const ::devices::Bms& Chimera::bms_lv(int index) const {
  // @@protoc_insertion_point(field_get:devices.Chimera.bms_lv)
  return _internal_bms_lv(index);
}
inline ::devices::Bms* Chimera::_internal_add_bms_lv() {
  return bms_lv_.Add();
}
inline ::devices::Bms* Chimera::add_bms_lv() {
  // @@protoc_insertion_point(field_add:devices.Chimera.bms_lv)
  return _internal_add_bms_lv();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::devices::Bms >&
Chimera::bms_lv() const {
  // @@protoc_insertion_point(field_list:devices.Chimera.bms_lv)
  return bms_lv_;
}

// repeated .devices.Bms bms_hv = 6;
inline int Chimera::_internal_bms_hv_size() const {
  return bms_hv_.size();
}
inline int Chimera::bms_hv_size() const {
  return _internal_bms_hv_size();
}
inline void Chimera::clear_bms_hv() {
  bms_hv_.Clear();
}
inline ::devices::Bms* Chimera::mutable_bms_hv(int index) {
  // @@protoc_insertion_point(field_mutable:devices.Chimera.bms_hv)
  return bms_hv_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::devices::Bms >*
Chimera::mutable_bms_hv() {
  // @@protoc_insertion_point(field_mutable_list:devices.Chimera.bms_hv)
  return &bms_hv_;
}
inline const ::devices::Bms& Chimera::_internal_bms_hv(int index) const {
  return bms_hv_.Get(index);
}
inline const ::devices::Bms& Chimera::bms_hv(int index) const {
  // @@protoc_insertion_point(field_get:devices.Chimera.bms_hv)
  return _internal_bms_hv(index);
}
inline ::devices::Bms* Chimera::_internal_add_bms_hv() {
  return bms_hv_.Add();
}
inline ::devices::Bms* Chimera::add_bms_hv() {
  // @@protoc_insertion_point(field_add:devices.Chimera.bms_hv)
  return _internal_add_bms_hv();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::devices::Bms >&
Chimera::bms_hv() const {
  // @@protoc_insertion_point(field_list:devices.Chimera.bms_hv)
  return bms_hv_;
}

// repeated .devices.Inverter inverter_left = 7;
inline int Chimera::_internal_inverter_left_size() const {
  return inverter_left_.size();
}
inline int Chimera::inverter_left_size() const {
  return _internal_inverter_left_size();
}
inline void Chimera::clear_inverter_left() {
  inverter_left_.Clear();
}
inline ::devices::Inverter* Chimera::mutable_inverter_left(int index) {
  // @@protoc_insertion_point(field_mutable:devices.Chimera.inverter_left)
  return inverter_left_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::devices::Inverter >*
Chimera::mutable_inverter_left() {
  // @@protoc_insertion_point(field_mutable_list:devices.Chimera.inverter_left)
  return &inverter_left_;
}
inline const ::devices::Inverter& Chimera::_internal_inverter_left(int index) const {
  return inverter_left_.Get(index);
}
inline const ::devices::Inverter& Chimera::inverter_left(int index) const {
  // @@protoc_insertion_point(field_get:devices.Chimera.inverter_left)
  return _internal_inverter_left(index);
}
inline ::devices::Inverter* Chimera::_internal_add_inverter_left() {
  return inverter_left_.Add();
}
inline ::devices::Inverter* Chimera::add_inverter_left() {
  // @@protoc_insertion_point(field_add:devices.Chimera.inverter_left)
  return _internal_add_inverter_left();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::devices::Inverter >&
Chimera::inverter_left() const {
  // @@protoc_insertion_point(field_list:devices.Chimera.inverter_left)
  return inverter_left_;
}

// repeated .devices.Inverter inverter_right = 8;
inline int Chimera::_internal_inverter_right_size() const {
  return inverter_right_.size();
}
inline int Chimera::inverter_right_size() const {
  return _internal_inverter_right_size();
}
inline void Chimera::clear_inverter_right() {
  inverter_right_.Clear();
}
inline ::devices::Inverter* Chimera::mutable_inverter_right(int index) {
  // @@protoc_insertion_point(field_mutable:devices.Chimera.inverter_right)
  return inverter_right_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::devices::Inverter >*
Chimera::mutable_inverter_right() {
  // @@protoc_insertion_point(field_mutable_list:devices.Chimera.inverter_right)
  return &inverter_right_;
}
inline const ::devices::Inverter& Chimera::_internal_inverter_right(int index) const {
  return inverter_right_.Get(index);
}
inline const ::devices::Inverter& Chimera::inverter_right(int index) const {
  // @@protoc_insertion_point(field_get:devices.Chimera.inverter_right)
  return _internal_inverter_right(index);
}
inline ::devices::Inverter* Chimera::_internal_add_inverter_right() {
  return inverter_right_.Add();
}
inline ::devices::Inverter* Chimera::add_inverter_right() {
  // @@protoc_insertion_point(field_add:devices.Chimera.inverter_right)
  return _internal_add_inverter_right();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::devices::Inverter >&
Chimera::inverter_right() const {
  // @@protoc_insertion_point(field_list:devices.Chimera.inverter_right)
  return inverter_right_;
}

// repeated .devices.Pedals pedal = 9;
inline int Chimera::_internal_pedal_size() const {
  return pedal_.size();
}
inline int Chimera::pedal_size() const {
  return _internal_pedal_size();
}
inline void Chimera::clear_pedal() {
  pedal_.Clear();
}
inline ::devices::Pedals* Chimera::mutable_pedal(int index) {
  // @@protoc_insertion_point(field_mutable:devices.Chimera.pedal)
  return pedal_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::devices::Pedals >*
Chimera::mutable_pedal() {
  // @@protoc_insertion_point(field_mutable_list:devices.Chimera.pedal)
  return &pedal_;
}
inline const ::devices::Pedals& Chimera::_internal_pedal(int index) const {
  return pedal_.Get(index);
}
inline const ::devices::Pedals& Chimera::pedal(int index) const {
  // @@protoc_insertion_point(field_get:devices.Chimera.pedal)
  return _internal_pedal(index);
}
inline ::devices::Pedals* Chimera::_internal_add_pedal() {
  return pedal_.Add();
}
inline ::devices::Pedals* Chimera::add_pedal() {
  // @@protoc_insertion_point(field_add:devices.Chimera.pedal)
  return _internal_add_pedal();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::devices::Pedals >&
Chimera::pedal() const {
  // @@protoc_insertion_point(field_list:devices.Chimera.pedal)
  return pedal_;
}

// repeated .devices.Steer steer = 10;
inline int Chimera::_internal_steer_size() const {
  return steer_.size();
}
inline int Chimera::steer_size() const {
  return _internal_steer_size();
}
inline void Chimera::clear_steer() {
  steer_.Clear();
}
inline ::devices::Steer* Chimera::mutable_steer(int index) {
  // @@protoc_insertion_point(field_mutable:devices.Chimera.steer)
  return steer_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::devices::Steer >*
Chimera::mutable_steer() {
  // @@protoc_insertion_point(field_mutable_list:devices.Chimera.steer)
  return &steer_;
}
inline const ::devices::Steer& Chimera::_internal_steer(int index) const {
  return steer_.Get(index);
}
inline const ::devices::Steer& Chimera::steer(int index) const {
  // @@protoc_insertion_point(field_get:devices.Chimera.steer)
  return _internal_steer(index);
}
inline ::devices::Steer* Chimera::_internal_add_steer() {
  return steer_.Add();
}
inline ::devices::Steer* Chimera::add_steer() {
  // @@protoc_insertion_point(field_add:devices.Chimera.steer)
  return _internal_add_steer();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::devices::Steer >&
Chimera::steer() const {
  // @@protoc_insertion_point(field_list:devices.Chimera.steer)
  return steer_;
}

// repeated .devices.Ecu ecu = 11;
inline int Chimera::_internal_ecu_size() const {
  return ecu_.size();
}
inline int Chimera::ecu_size() const {
  return _internal_ecu_size();
}
inline void Chimera::clear_ecu() {
  ecu_.Clear();
}
inline ::devices::Ecu* Chimera::mutable_ecu(int index) {
  // @@protoc_insertion_point(field_mutable:devices.Chimera.ecu)
  return ecu_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::devices::Ecu >*
Chimera::mutable_ecu() {
  // @@protoc_insertion_point(field_mutable_list:devices.Chimera.ecu)
  return &ecu_;
}
inline const ::devices::Ecu& Chimera::_internal_ecu(int index) const {
  return ecu_.Get(index);
}
inline const ::devices::Ecu& Chimera::ecu(int index) const {
  // @@protoc_insertion_point(field_get:devices.Chimera.ecu)
  return _internal_ecu(index);
}
inline ::devices::Ecu* Chimera::_internal_add_ecu() {
  return ecu_.Add();
}
inline ::devices::Ecu* Chimera::add_ecu() {
  // @@protoc_insertion_point(field_add:devices.Chimera.ecu)
  return _internal_add_ecu();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::devices::Ecu >&
Chimera::ecu() const {
  // @@protoc_insertion_point(field_list:devices.Chimera.ecu)
  return ecu_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace devices

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_devices_2eproto
